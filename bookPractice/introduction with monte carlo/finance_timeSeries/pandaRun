{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.656713,  0.844925,  0.132802,  0.968498],\n",
       "       [ 2.137729,  0.664162,  0.544221, -0.638509],\n",
       "       [-2.917584,  0.0766  ,  0.136372, -0.659683],\n",
       "       [ 1.787964,  0.012678,  0.591197, -1.085364],\n",
       "       [ 1.565788, -0.914153, -0.852804,  0.743083],\n",
       "       [ 0.591264,  0.151409,  0.375456, -0.788673],\n",
       "       [-1.849638, -0.908592,  0.451962,  1.112673],\n",
       "       [ 0.579896, -1.411558,  1.65498 ,  0.930525],\n",
       "       [ 0.335295, -0.021709, -0.585499, -0.649938]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.random.standard_normal((9,4))\n",
    "a.round(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.656713</td>\n",
       "      <td>0.844925</td>\n",
       "      <td>0.132802</td>\n",
       "      <td>0.968498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.137729</td>\n",
       "      <td>0.664162</td>\n",
       "      <td>0.544221</td>\n",
       "      <td>-0.638509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-2.917584</td>\n",
       "      <td>0.076600</td>\n",
       "      <td>0.136372</td>\n",
       "      <td>-0.659683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.787964</td>\n",
       "      <td>0.012678</td>\n",
       "      <td>0.591197</td>\n",
       "      <td>-1.085364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.565788</td>\n",
       "      <td>-0.914153</td>\n",
       "      <td>-0.852804</td>\n",
       "      <td>0.743083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.591264</td>\n",
       "      <td>0.151409</td>\n",
       "      <td>0.375456</td>\n",
       "      <td>-0.788673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-1.849638</td>\n",
       "      <td>-0.908592</td>\n",
       "      <td>0.451962</td>\n",
       "      <td>1.112673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.579896</td>\n",
       "      <td>-1.411558</td>\n",
       "      <td>1.654980</td>\n",
       "      <td>0.930525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.335295</td>\n",
       "      <td>-0.021709</td>\n",
       "      <td>-0.585499</td>\n",
       "      <td>-0.649938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          1         2         3         4\n",
       "0  1.656713  0.844925  0.132802  0.968498\n",
       "1  2.137729  0.664162  0.544221 -0.638509\n",
       "2 -2.917584  0.076600  0.136372 -0.659683\n",
       "3  1.787964  0.012678  0.591197 -1.085364\n",
       "4  1.565788 -0.914153 -0.852804  0.743083\n",
       "5  0.591264  0.151409  0.375456 -0.788673\n",
       "6 -1.849638 -0.908592  0.451962  1.112673\n",
       "7  0.579896 -1.411558  1.654980  0.930525\n",
       "8  0.335295 -0.021709 -0.585499 -0.649938"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(a)\n",
    "df.columns = [[1,2,3,4]]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2015-01-31', '2015-02-28', '2015-03-31', '2015-04-30',\n",
       "               '2015-05-31', '2015-06-30', '2015-07-31', '2015-08-31',\n",
       "               '2015-09-30'],\n",
       "              dtype='datetime64[ns]', freq='M')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dates = pd.date_range('2015-1-1', periods=9, freq = 'M')\n",
    "dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-31</th>\n",
       "      <td>1.656713</td>\n",
       "      <td>0.844925</td>\n",
       "      <td>0.132802</td>\n",
       "      <td>0.968498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-02-28</th>\n",
       "      <td>2.137729</td>\n",
       "      <td>0.664162</td>\n",
       "      <td>0.544221</td>\n",
       "      <td>-0.638509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-03-31</th>\n",
       "      <td>-2.917584</td>\n",
       "      <td>0.076600</td>\n",
       "      <td>0.136372</td>\n",
       "      <td>-0.659683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-04-30</th>\n",
       "      <td>1.787964</td>\n",
       "      <td>0.012678</td>\n",
       "      <td>0.591197</td>\n",
       "      <td>-1.085364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-05-31</th>\n",
       "      <td>1.565788</td>\n",
       "      <td>-0.914153</td>\n",
       "      <td>-0.852804</td>\n",
       "      <td>0.743083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-06-30</th>\n",
       "      <td>0.591264</td>\n",
       "      <td>0.151409</td>\n",
       "      <td>0.375456</td>\n",
       "      <td>-0.788673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-07-31</th>\n",
       "      <td>-1.849638</td>\n",
       "      <td>-0.908592</td>\n",
       "      <td>0.451962</td>\n",
       "      <td>1.112673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-08-31</th>\n",
       "      <td>0.579896</td>\n",
       "      <td>-1.411558</td>\n",
       "      <td>1.654980</td>\n",
       "      <td>0.930525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-09-30</th>\n",
       "      <td>0.335295</td>\n",
       "      <td>-0.021709</td>\n",
       "      <td>-0.585499</td>\n",
       "      <td>-0.649938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   1         2         3         4\n",
       "2015-01-31  1.656713  0.844925  0.132802  0.968498\n",
       "2015-02-28  2.137729  0.664162  0.544221 -0.638509\n",
       "2015-03-31 -2.917584  0.076600  0.136372 -0.659683\n",
       "2015-04-30  1.787964  0.012678  0.591197 -1.085364\n",
       "2015-05-31  1.565788 -0.914153 -0.852804  0.743083\n",
       "2015-06-30  0.591264  0.151409  0.375456 -0.788673\n",
       "2015-07-31 -1.849638 -0.908592  0.451962  1.112673\n",
       "2015-08-31  0.579896 -1.411558  1.654980  0.930525\n",
       "2015-09-30  0.335295 -0.021709 -0.585499 -0.649938"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.index = dates\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   1         2         3         4\n",
      "2015-01-31  1.656713  0.844925  0.132802  0.968498\n",
      "2015-02-28  3.794441  1.509087  0.677023  0.329989\n",
      "2015-03-31  0.876857  1.585687  0.813395 -0.329694\n",
      "2015-04-30  2.664822  1.598365  1.404592 -1.415059\n",
      "2015-05-31  4.230609  0.684212  0.551788 -0.671976\n",
      "2015-06-30  4.821873  0.835620  0.927244 -1.460649\n",
      "2015-07-31  2.972235 -0.072971  1.379206 -0.347977\n",
      "2015-08-31  3.552132 -1.484530  3.034186  0.582548\n",
      "2015-09-30  3.887426 -1.506239  2.448687 -0.067390\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.431936</td>\n",
       "      <td>-0.167360</td>\n",
       "      <td>0.272076</td>\n",
       "      <td>-0.007488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.732618</td>\n",
       "      <td>0.757138</td>\n",
       "      <td>0.721974</td>\n",
       "      <td>0.912338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-2.917584</td>\n",
       "      <td>-1.411558</td>\n",
       "      <td>-0.852804</td>\n",
       "      <td>-1.085364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.335295</td>\n",
       "      <td>-0.908592</td>\n",
       "      <td>0.132802</td>\n",
       "      <td>-0.659683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.591264</td>\n",
       "      <td>0.012678</td>\n",
       "      <td>0.375456</td>\n",
       "      <td>-0.638509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.656713</td>\n",
       "      <td>0.151409</td>\n",
       "      <td>0.544221</td>\n",
       "      <td>0.930525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.137729</td>\n",
       "      <td>0.844925</td>\n",
       "      <td>1.654980</td>\n",
       "      <td>1.112673</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4\n",
       "count  9.000000  9.000000  9.000000  9.000000\n",
       "mean   0.431936 -0.167360  0.272076 -0.007488\n",
       "std    1.732618  0.757138  0.721974  0.912338\n",
       "min   -2.917584 -1.411558 -0.852804 -1.085364\n",
       "25%    0.335295 -0.908592  0.132802 -0.659683\n",
       "50%    0.591264  0.012678  0.375456 -0.638509\n",
       "75%    1.656713  0.151409  0.544221  0.930525\n",
       "max    2.137729  0.844925  1.654980  1.112673"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df.cumsum())\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "df.cumsum().plot(lw=2.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>Quarter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-31</th>\n",
       "      <td>1.656713</td>\n",
       "      <td>0.844925</td>\n",
       "      <td>0.132802</td>\n",
       "      <td>0.968498</td>\n",
       "      <td>Q1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-02-28</th>\n",
       "      <td>2.137729</td>\n",
       "      <td>0.664162</td>\n",
       "      <td>0.544221</td>\n",
       "      <td>-0.638509</td>\n",
       "      <td>Q1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-03-31</th>\n",
       "      <td>-2.917584</td>\n",
       "      <td>0.076600</td>\n",
       "      <td>0.136372</td>\n",
       "      <td>-0.659683</td>\n",
       "      <td>Q1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-04-30</th>\n",
       "      <td>1.787964</td>\n",
       "      <td>0.012678</td>\n",
       "      <td>0.591197</td>\n",
       "      <td>-1.085364</td>\n",
       "      <td>Q2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-05-31</th>\n",
       "      <td>1.565788</td>\n",
       "      <td>-0.914153</td>\n",
       "      <td>-0.852804</td>\n",
       "      <td>0.743083</td>\n",
       "      <td>Q2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-06-30</th>\n",
       "      <td>0.591264</td>\n",
       "      <td>0.151409</td>\n",
       "      <td>0.375456</td>\n",
       "      <td>-0.788673</td>\n",
       "      <td>Q2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-07-31</th>\n",
       "      <td>-1.849638</td>\n",
       "      <td>-0.908592</td>\n",
       "      <td>0.451962</td>\n",
       "      <td>1.112673</td>\n",
       "      <td>Q3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-08-31</th>\n",
       "      <td>0.579896</td>\n",
       "      <td>-1.411558</td>\n",
       "      <td>1.654980</td>\n",
       "      <td>0.930525</td>\n",
       "      <td>Q3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-09-30</th>\n",
       "      <td>0.335295</td>\n",
       "      <td>-0.021709</td>\n",
       "      <td>-0.585499</td>\n",
       "      <td>-0.649938</td>\n",
       "      <td>Q3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   1         2         3         4 Quarter\n",
       "2015-01-31  1.656713  0.844925  0.132802  0.968498      Q1\n",
       "2015-02-28  2.137729  0.664162  0.544221 -0.638509      Q1\n",
       "2015-03-31 -2.917584  0.076600  0.136372 -0.659683      Q1\n",
       "2015-04-30  1.787964  0.012678  0.591197 -1.085364      Q2\n",
       "2015-05-31  1.565788 -0.914153 -0.852804  0.743083      Q2\n",
       "2015-06-30  0.591264  0.151409  0.375456 -0.788673      Q2\n",
       "2015-07-31 -1.849638 -0.908592  0.451962  1.112673      Q3\n",
       "2015-08-31  0.579896 -1.411558  1.654980  0.930525      Q3\n",
       "2015-09-30  0.335295 -0.021709 -0.585499 -0.649938      Q3"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Quarter'] = ['Q1','Q1','Q1','Q2','Q2','Q2','Q3','Q3','Q3']\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Quarter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Q1</th>\n",
       "      <td>0.292286</td>\n",
       "      <td>0.528562</td>\n",
       "      <td>0.271132</td>\n",
       "      <td>-0.109898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q2</th>\n",
       "      <td>1.315005</td>\n",
       "      <td>-0.250022</td>\n",
       "      <td>0.037950</td>\n",
       "      <td>-0.376985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q3</th>\n",
       "      <td>-0.311482</td>\n",
       "      <td>-0.780620</td>\n",
       "      <td>0.507148</td>\n",
       "      <td>0.464420</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                1         2         3         4\n",
       "Quarter                                        \n",
       "Q1       0.292286  0.528562  0.271132 -0.109898\n",
       "Q2       1.315005 -0.250022  0.037950 -0.376985\n",
       "Q3      -0.311482 -0.780620  0.507148  0.464420"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Quarter']\n",
    "groups = df.groupby(('Quarter'))\n",
    "groups.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                1         2         3         4\n",
      "Quarter                                        \n",
      "Q1       2.137729  0.844925  0.544221  0.968498\n",
      "Q2       1.787964  0.151409  0.591197  0.743083\n",
      "Q3       0.579896 -0.021709  1.654980  1.112673\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Quarter\n",
       "Q1    3\n",
       "Q2    3\n",
       "Q3    3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(groups.max())\n",
    "groups.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/f1/dgz0r8r50xs46bwbp23z_yjh0000gq/T/ipykernel_36336/2342154746.py:4: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  DAX = yf.download('^GDAXI', start='2001-01-01')\n",
      "[*********************100%***********************]  1 of 1 completed"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 6207 entries, 2001-01-02 to 2025-06-12\n",
      "Data columns (total 5 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   (Close, ^GDAXI)   6207 non-null   float64\n",
      " 1   (High, ^GDAXI)    6207 non-null   float64\n",
      " 2   (Low, ^GDAXI)     6207 non-null   float64\n",
      " 3   (Open, ^GDAXI)    6207 non-null   float64\n",
      " 4   (Volume, ^GDAXI)  6207 non-null   int64  \n",
      "dtypes: float64(4), int64(1)\n",
      "memory usage: 291.0 KB\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "\n",
    "# Download DAX index data from Yahoo using yfinance\n",
    "DAX = yf.download('^GDAXI', start='2001-01-01')\n",
    "\n",
    "# Print structure info\n",
    "DAX.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>Close</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>^GDAXI</th>\n",
       "      <th>^GDAXI</th>\n",
       "      <th>^GDAXI</th>\n",
       "      <th>^GDAXI</th>\n",
       "      <th>^GDAXI</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-06-06</th>\n",
       "      <td>24304.460938</td>\n",
       "      <td>24355.029297</td>\n",
       "      <td>24214.529297</td>\n",
       "      <td>24304.369141</td>\n",
       "      <td>41235800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-09</th>\n",
       "      <td>24174.320312</td>\n",
       "      <td>24289.509766</td>\n",
       "      <td>24097.089844</td>\n",
       "      <td>24252.259766</td>\n",
       "      <td>35991400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-10</th>\n",
       "      <td>23987.560547</td>\n",
       "      <td>24168.589844</td>\n",
       "      <td>23964.769531</td>\n",
       "      <td>24156.529297</td>\n",
       "      <td>59033500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-11</th>\n",
       "      <td>23948.900391</td>\n",
       "      <td>24151.390625</td>\n",
       "      <td>23948.570312</td>\n",
       "      <td>23996.660156</td>\n",
       "      <td>62192700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-12</th>\n",
       "      <td>23771.449219</td>\n",
       "      <td>23885.060547</td>\n",
       "      <td>23618.849609</td>\n",
       "      <td>23768.050781</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Price              Close          High           Low          Open    Volume\n",
       "Ticker            ^GDAXI        ^GDAXI        ^GDAXI        ^GDAXI    ^GDAXI\n",
       "Date                                                                        \n",
       "2025-06-06  24304.460938  24355.029297  24214.529297  24304.369141  41235800\n",
       "2025-06-09  24174.320312  24289.509766  24097.089844  24252.259766  35991400\n",
       "2025-06-10  23987.560547  24168.589844  23964.769531  24156.529297  59033500\n",
       "2025-06-11  23948.900391  24151.390625  23948.570312  23996.660156  62192700\n",
       "2025-06-12  23771.449219  23885.060547  23618.849609  23768.050781         0"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DAX.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Date'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "DAX['Close'].plot(figsize=(8,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['Return'] not in index\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[47], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m DAX[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRet_Vectorized\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlog(DAX[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m/\u001b[39m DAX[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mshift(\u001b[38;5;241m1\u001b[39m))\n\u001b[0;32m----> 2\u001b[0m DAX[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRet_Vectorized\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mReturn\u001b[39m\u001b[38;5;124m'\u001b[39m]]\u001b[38;5;241m.\u001b[39mtail()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/frame.py:3899\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3897\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   3898\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 3899\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39m_get_indexer_strict(key, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolumns\u001b[39m\u001b[38;5;124m\"\u001b[39m)[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   3901\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   3902\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/indexes/multi.py:2648\u001b[0m, in \u001b[0;36mMultiIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   2645\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(keyarr) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(keyarr[\u001b[38;5;241m0\u001b[39m], \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m   2646\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_indexer_level_0(keyarr)\n\u001b[0;32m-> 2648\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_raise_if_missing(key, indexer, axis_name)\n\u001b[1;32m   2649\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[indexer], indexer\n\u001b[1;32m   2651\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m_get_indexer_strict(key, axis_name)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/indexes/multi.py:2666\u001b[0m, in \u001b[0;36mMultiIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   2664\u001b[0m cmask \u001b[38;5;241m=\u001b[39m check \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   2665\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cmask\u001b[38;5;241m.\u001b[39many():\n\u001b[0;32m-> 2666\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkeyarr[cmask]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   2667\u001b[0m \u001b[38;5;66;03m# We get here when levels still contain values which are not\u001b[39;00m\n\u001b[1;32m   2668\u001b[0m \u001b[38;5;66;03m# actually in Index anymore\u001b[39;00m\n\u001b[1;32m   2669\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkeyarr\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['Return'] not in index\""
     ]
    }
   ],
   "source": [
    "DAX['Ret_Vectorized'] = np.log(DAX['Close'] / DAX['Close'].shift(1))\n",
    "%%time\n",
    "\n",
    "DAX[['Close', 'Ret_Vectorized', 'Return']].tail()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
